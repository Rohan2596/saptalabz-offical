{"version":3,"sources":["assets/gif/user_flow.gif","assets/gif/team.png","assets/gif/marlon.png","component/navbar.jsx","component/home/home.jsx","component/about-us/aboutUs.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","state","isToggleOn","this","setState","console","log","className","onClick","menuclick","style","alignItems","display","Component","Home","src","require","alt","AboutUs","fontWeight","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAAAA,EAAOC,QAAU,IAA0B,uC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mJCuD3BC,E,kDAlDZ,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,YAAW,GAHD,E,wDAOdC,KAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBC,YAAW,MAEfG,QAAQC,IAAI,aAAaH,KAAKF,MAAMC,YACpCG,QAAQC,IAAI,gB,+BAKP,IAAD,OACJ,OACI,oCACA,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAAf,aAIA,yBAAKA,UAAU,YAAY,kBAAC,IAAD,CAAUC,QAAS,kBAAM,EAAKC,aACzDC,MAAO,CACHC,WAAW,SACVC,QAAQ,WAGb,yBAAKL,UAAU,YACX,0BAAMA,UAAU,YAAhB,QAGA,0BAAMA,UAAU,YAAhB,YAGA,0BAAMA,UAAU,YAAhB,aAGA,0BAAMA,UAAU,YAAhB,qB,GAzCCM,a,eC0BNC,G,wDA3BX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAY,GAHD,E,qDAQf,OACI,oCACI,yBAAKK,UAAU,QACX,yBAAKA,UAAU,aAChB,yBAAKQ,IAAKC,EAAQ,IAAoCC,IAAI,aAAaV,UAAU,gBAEhF,yBAAKA,UAAU,cAEV,0BAAMA,UAAU,OAAhB,2BACA,0BAAMA,UAAU,WAAhB,kCACA,0BAAMA,UAAU,eAAhB,2I,GAnBNM,cCiCJK,G,6KA9BP,OACI,oCACI,yBAAKX,UAAU,WACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,iBAAhB,wBACA,0BAAMA,UAAU,uBAAhB,kJAKJ,yBAAKA,UAAU,iBACX,yBAAKQ,IAAKC,EAAQ,IAA8BC,IAAI,GAAGV,UAAU,oBAKzE,yBAAKA,UAAU,QACX,0BAAMA,UAAU,YAAhB,YACA,yBAAKA,UAAU,gBACX,yBAAKQ,IAAKC,EAAQ,IAAgCC,IAAI,GAAGV,UAAU,gBACnE,0BAAMA,UAAU,YAAYG,MAAO,CAACS,WAAW,SAA/C,mBACA,0BAAMZ,UAAU,aAAhB,wBACA,0BAAMA,UAAU,aAAhB,+B,GAxBFM,cCiBPO,MAbf,WACE,OACE,kBAAC,IAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,SCFAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.550d6ca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user_flow.9b4319c1.gif\";","module.exports = __webpack_public_path__ + \"static/media/team.401b8b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/marlon.f4638af9.png\";","import  React,{Component}  from \"react\";\nimport './navbar.css'\nimport MenuIcon from '@material-ui/icons/Menu';\n\nclass Navbar extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            isToggleOn:false\n        }\n    }\n    menuclick(){\n        this.setState(state => ({\n            isToggleOn:true\n        }));\n        console.log(\"Menu click\"+this.state.isToggleOn);\n        console.log(\"sdfnsdnfns\");\n        \n        \n    }\n   \n    render(){\n        return(\n            <>\n            <div className=\"navbar\">\n                <div className=\"title\">\n                    Saptalabz\n\n                </div>\n                <div className=\"menuIcon\" ><MenuIcon onClick={() => this.menuclick()}\n                style={{\n                    alignItems:'center'\n                    ,display:\"flex\"\n                }}/></div>\n\n                <div className=\"menulist\">\n                    <span className=\"menuItem\">\n                        Home\n                    </span>\n                    <span className=\"menuItem\">\n                        About Us\n                    </span>\n                    <span className=\"menuItem\">\n                        Portfolio\n                    </span>\n                    <span className=\"menuItem\">\n                        Contact Us\n                    </span>\n                </div>\n            </div>\n\n            </>\n        )\n    }\n}\n export default Navbar","import React, { Component } from \"react\";\nimport \"./home.css\";\nclass Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isToggleOn: false\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"home\">\n                    <div className=\"home_left\">\n                   <img src={require('../../assets/gif/user_flow.gif')}  alt=\"home_image\" className=\"home_image\" />\n                    </div>\n                    <div className=\"home_right\">\n                     \n                         <span className=\"tag\">Application Development</span>\n                         <span className=\"tagline\" >Let's build your App together </span>\n                         <span className=\"description\">We help businesses owner's to build App and website. Our team of unique specialist can help your business to achieve your goals.</span>             \n                                        \n                  </div>\n                </div>\n\n            </>\n        )\n    }\n}\nexport default Home","import React, { Component } from \"react\";\nimport './aboutUs.css';\nimport { requirePropFactory } from \"@material-ui/core\";\nclass AboutUs extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"aboutUs\">\n                    <div className=\"aboutUs-left\">\n                        <span className=\"aboutUs_title\">We are Saptalabzianz</span>\n                        <span className=\"aboutUs-description\">\n                            We build scalable and intelligent web and mobile applications to make the life of people easier.\n                            Our team of professional help to achieve it.\n                     </span>\n                    </div>\n                    <div className=\"aboutUs-right\">\n                        <img src={require('../../assets/gif/team.png')} alt=\"\" className=\"aboutus-image\" />\n\n                    </div>\n\n                </div>\n                <div className=\"team\">\n                    <span className=\"our_team\">Our Team</span>\n                    <div className=\"team_members\">\n                        <img src={require('../../assets/gif/marlon.png')} alt=\"\" className=\"team_avatar\" />\n                        <span className=\"team_info\" style={{fontWeight:\"bold\"}}>@CEO & @Founder</span>\n                        <span className=\"team_info\">Rohan Ravindra Kadam</span>\n                        <span className=\"team_info\">Full Stack Developer</span>\n                    </div>\n\n                </div>\n            </>\n        )\n    }\n}\nexport default AboutUs","import React from 'react';\nimport './App.css';\nimport Navbar from './component/navbar';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './component/home/home';\nimport AboutUs from './component/about-us/aboutUs';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n     <Navbar  />\n     <Home/>\n     <AboutUs/>\n     <Switch>\n       <Route  path='/' />\n     </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}